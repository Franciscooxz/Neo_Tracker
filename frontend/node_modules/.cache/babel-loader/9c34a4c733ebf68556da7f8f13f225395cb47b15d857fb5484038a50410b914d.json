{"ast":null,"code":"// frontend/src/services/api.js - VERSIÓN CORREGIDA\nimport axios from 'axios';\n\n/**\r\n * Cliente API para NEO Tracker\r\n * CORREGIDO: Rutas sin prefijo /api/v1/\r\n */\n\n// Configuración base de la API\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\n\n// Crear instancia de axios con configuración base\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // 30 segundos\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Interceptor de request para logging\napi.interceptors.request.use(config => {\n  var _config$method;\n  console.log(`🌐 API Request: ${(_config$method = config.method) === null || _config$method === void 0 ? void 0 : _config$method.toUpperCase()} ${config.url}`);\n  return config;\n}, error => {\n  console.error('❌ API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Interceptor de response para manejo de errores\napi.interceptors.response.use(response => {\n  console.log(`✅ API Response: ${response.status} ${response.config.url}`);\n  return response;\n}, error => {\n  console.error('❌ API Response Error:', error);\n\n  // Manejo específico de errores\n  if (error.response) {\n    // Error del servidor (4xx, 5xx)\n    const {\n      status,\n      data\n    } = error.response;\n    console.error(`Server Error ${status}:`, data);\n    switch (status) {\n      case 404:\n        console.error('🔍 Endpoint not found - Check if backend is running correctly');\n        break;\n      case 500:\n        console.error('🔥 Internal server error');\n        break;\n      case 503:\n        console.error('⏰ Service unavailable');\n        break;\n    }\n  } else if (error.request) {\n    // Error de red\n    console.error('🌐 Network error - Cannot reach server');\n  } else {\n    // Otro tipo de error\n    console.error('⚠️ Request setup error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// Funciones de API - RUTAS CORREGIDAS\nexport const asteroidAPI = {\n  // Obtener todos los asteroides\n  getAll: () => api.get('/asteroids/'),\n  // Obtener asteroide por ID\n  getById: id => api.get(`/asteroids/${id}`),\n  // Obtener asteroides peligrosos\n  getDangerous: () => api.get('/asteroids/dangerous/'),\n  // Obtener próximos acercamientos\n  getUpcoming: () => api.get('/asteroids/upcoming/'),\n  // Health check\n  healthCheck: () => api.get('/health'),\n  // Información de la API\n  getInfo: () => api.get('/info')\n};\n\n// Funciones adicionales para manejo de errores\nexport const handleAPIError = error => {\n  if (error.response) {\n    // Error del servidor\n    const {\n      status,\n      data\n    } = error.response;\n    return {\n      type: 'SERVER_ERROR',\n      status,\n      message: (data === null || data === void 0 ? void 0 : data.detail) || (data === null || data === void 0 ? void 0 : data.message) || `Error ${status}`,\n      data\n    };\n  } else if (error.request) {\n    // Error de red\n    return {\n      type: 'NETWORK_ERROR',\n      message: 'No se pudo conectar con el servidor. Verifica tu conexión.',\n      data: null\n    };\n  } else {\n    // Error de configuración\n    return {\n      type: 'REQUEST_ERROR',\n      message: error.message || 'Error al configurar la solicitud',\n      data: null\n    };\n  }\n};\n\n// Utilidades para retry\nexport const retryRequest = async (requestFn, maxRetries = 3, delay = 1000) => {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      return await requestFn();\n    } catch (error) {\n      console.log(`🔄 Retry attempt ${i + 1}/${maxRetries}`);\n      if (i === maxRetries - 1) {\n        throw error; // Último intento fallido\n      }\n\n      // Esperar antes del siguiente intento\n      await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\n    }\n  }\n};\n\n// Exportar la instancia principal\nexport { api };\n\n// Exportar como default para compatibilidad\nexport default {\n  api,\n  asteroidAPI,\n  handleAPIError,\n  retryRequest\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","_config$method","console","log","method","toUpperCase","url","error","Promise","reject","response","status","data","message","asteroidAPI","getAll","get","getById","id","getDangerous","getUpcoming","healthCheck","getInfo","handleAPIError","type","detail","retryRequest","requestFn","maxRetries","delay","i","resolve","setTimeout"],"sources":["C:/Users/Fran/Desktop/Neo_Tracker/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js - VERSIÓN CORREGIDA\r\nimport axios from 'axios';\r\n\r\n/**\r\n * Cliente API para NEO Tracker\r\n * CORREGIDO: Rutas sin prefijo /api/v1/\r\n */\r\n\r\n// Configuración base de la API\r\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL || 'http://127.0.0.1:8000';\r\n\r\n// Crear instancia de axios con configuración base\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000, // 30 segundos\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    'Accept': 'application/json',\r\n  },\r\n});\r\n\r\n// Interceptor de request para logging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log(`🌐 API Request: ${config.method?.toUpperCase()} ${config.url}`);\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('❌ API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Interceptor de response para manejo de errores\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log(`✅ API Response: ${response.status} ${response.config.url}`);\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('❌ API Response Error:', error);\r\n    \r\n    // Manejo específico de errores\r\n    if (error.response) {\r\n      // Error del servidor (4xx, 5xx)\r\n      const { status, data } = error.response;\r\n      console.error(`Server Error ${status}:`, data);\r\n      \r\n      switch (status) {\r\n        case 404:\r\n          console.error('🔍 Endpoint not found - Check if backend is running correctly');\r\n          break;\r\n        case 500:\r\n          console.error('🔥 Internal server error');\r\n          break;\r\n        case 503:\r\n          console.error('⏰ Service unavailable');\r\n          break;\r\n      }\r\n    } else if (error.request) {\r\n      // Error de red\r\n      console.error('🌐 Network error - Cannot reach server');\r\n    } else {\r\n      // Otro tipo de error\r\n      console.error('⚠️ Request setup error:', error.message);\r\n    }\r\n    \r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Funciones de API - RUTAS CORREGIDAS\r\nexport const asteroidAPI = {\r\n  // Obtener todos los asteroides\r\n  getAll: () => api.get('/asteroids/'),\r\n  \r\n  // Obtener asteroide por ID\r\n  getById: (id) => api.get(`/asteroids/${id}`),\r\n  \r\n  // Obtener asteroides peligrosos\r\n  getDangerous: () => api.get('/asteroids/dangerous/'),\r\n  \r\n  // Obtener próximos acercamientos\r\n  getUpcoming: () => api.get('/asteroids/upcoming/'),\r\n  \r\n  // Health check\r\n  healthCheck: () => api.get('/health'),\r\n  \r\n  // Información de la API\r\n  getInfo: () => api.get('/info'),\r\n};\r\n\r\n// Funciones adicionales para manejo de errores\r\nexport const handleAPIError = (error) => {\r\n  if (error.response) {\r\n    // Error del servidor\r\n    const { status, data } = error.response;\r\n    return {\r\n      type: 'SERVER_ERROR',\r\n      status,\r\n      message: data?.detail || data?.message || `Error ${status}`,\r\n      data\r\n    };\r\n  } else if (error.request) {\r\n    // Error de red\r\n    return {\r\n      type: 'NETWORK_ERROR',\r\n      message: 'No se pudo conectar con el servidor. Verifica tu conexión.',\r\n      data: null\r\n    };\r\n  } else {\r\n    // Error de configuración\r\n    return {\r\n      type: 'REQUEST_ERROR',\r\n      message: error.message || 'Error al configurar la solicitud',\r\n      data: null\r\n    };\r\n  }\r\n};\r\n\r\n// Utilidades para retry\r\nexport const retryRequest = async (requestFn, maxRetries = 3, delay = 1000) => {\r\n  for (let i = 0; i < maxRetries; i++) {\r\n    try {\r\n      return await requestFn();\r\n    } catch (error) {\r\n      console.log(`🔄 Retry attempt ${i + 1}/${maxRetries}`);\r\n      \r\n      if (i === maxRetries - 1) {\r\n        throw error; // Último intento fallido\r\n      }\r\n      \r\n      // Esperar antes del siguiente intento\r\n      await new Promise(resolve => setTimeout(resolve, delay * (i + 1)));\r\n    }\r\n  }\r\n};\r\n\r\n// Exportar la instancia principal\r\nexport { api };\r\n\r\n// Exportar como default para compatibilidad\r\nexport default {\r\n  api,\r\n  asteroidAPI,\r\n  handleAPIError,\r\n  retryRequest\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}